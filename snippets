use std::f32::consts::PI;
use crate::signal::Signal;
use crate::rng::Rng;

fn lerp(a: f32, b: f32, t: f32) -> f32 {
    (1.0 - t) * a + t * b
}

impl Signal {
    pub fn zero(n: usize) -> Self {
        Signal { samples: vec![0.0; n] }
    }
    pub fn sine(n: usize, f: f32, fs: f32) -> Self {
        let samples = (0..n).map(|x| x as f32 * 2.0 * PI * f / fs).map(|phase| phase.sin()).collect();
        Signal { samples }
    }
    pub fn sweep(n: usize, f1: f32, f2: f32, fs: f32) -> Self {
        let mut samples = vec![0.0; n];
        let mut phase = 0.0;
        for i in 0..n {
            let f = lerp(f1, f2, i as f32 / n as f32);
            phase += 2.0 * PI * f / fs;
            samples[i] = phase.sin();
        }
        Signal { samples }
    }
    pub fn white(n: usize) -> Self {
        let mut rng = Rng::new_random();
        let samples = (0..n).map(|x| rng.next_float()*2.0 - 1.0).collect();
        Signal { samples }
    }
    pub fn wnd_adsr(n: usize, a: f32, d: f32, s: f32, r: f32, fs: f32) -> Self {
        let samples = (0..n).map(|i| envelope_adsr(n, i, a, d, s, r, 44100.0)).collect();
        Signal { samples }
    }
    pub fn wnd_exp(n: usize, a: f32) -> Self {
        let mut buf = vec![0.0; n];
        let mut val = 1.0;
        for i in 0..buf.len() {
            buf[i] = val;
            val *= a;
        }
        Signal {samples: buf}
    }
    pub fn wnd_blackman(n: usize) -> Self {
        let mut samples = Vec::with_capacity(n);
        for i in 0..n {
            let coeff = 0.42 - 0.5 * (2.0 * std::f32::consts::PI * i as f32 / n as f32).cos()
                + 0.08 * (4.0 * std::f32::consts::PI * i as f32 / n as f32).cos();
            samples.push(coeff);
        }
        Signal { samples }
    }
    pub fn kick(n: usize) -> Self {
        let mut buf = Self::sine(n, 2.0*PI*50.0, 44100.0);
        
        let mut buf2 = buf.clone();
        // wnd should be exponential
        buf *= &Self::wnd_exp(n, 0.999);
        buf *= 2.0;
        buf.tanh();
        buf *= 1.1;
        buf.tanh();
        buf *= 1.1;
        buf.tanh();
        buf *= 1.1;
        buf.tanh();
        buf *= 16.0;
        buf.tanh();
        buf.tanh();

        // maybe u would zinv a few times n do echo / rumble

        buf2 *= &Self::wnd_exp(n, 0.99);
        buf2 *= 4.0;
        buf2.tanh();
        buf2 *= 8.0;
        buf2.tanh();
        buf2 *= 8.0;
        buf2.tanh();
        buf2 *= 4.0;
        buf2.tanh();

        buf += &buf2;
        buf.tanh();

        buf
    }
}

// outputs window between 0 and 1.0
// a, d and r are times in seconds
pub fn envelope_adsr(len: usize, current_sample: usize, a: f32, d: f32, s: f32, r: f32, sample_rate: f32) -> f32 {
    // Calculate the total time for the envelope (attack + decay + sustain + release)
    let total_time = a + d + r;

    // Calculate the number of samples for each phase
    let a_samples = (a * sample_rate) as usize;
    let d_samples = (d * sample_rate) as usize;
    let r_samples = (r * sample_rate) as usize;

    // Calculate the sustain level
    let sustain_level = s;

    // Check which phase we are in
    if current_sample < a_samples {
        // We are in the attack phase
        // Calculate the linear interpolation between 0 and 1 for the attack phase
        return (current_sample as f32) / (a_samples as f32);
    } else if current_sample < (a_samples + d_samples) {
        // We are in the decay phase
        // Calculate the linear interpolation between 1 and the sustain level for the decay phase
        let decay_start = a_samples as f32;
        let decay_samples = d_samples as f32;
        return 1.0 - ((current_sample as f32 - decay_start) / decay_samples) * (1.0 - sustain_level);
    } else if current_sample < (len - r_samples) {
        // We are in the sustain phase
        return sustain_level;
    } else {
        // We are in the release phase
        // Calculate the linear interpolation between the sustain level and 0 for the release phase
        let release_start = (len - r_samples) as f32;
        let release_samples = r_samples as f32;
        return sustain_level * (1.0 - (current_sample as f32 - release_start) / release_samples);
    }
}

use crate::signal::*;
use crate::signal_impulse::*;
use crate::sound_api::*;
use std::time::Duration;

pub fn play(s: &Signal) {
    let slen = s.samples.len();
    let mut e = SoundAPI::new();
    let h = e.load_buffer(s.clone());
    std::thread::sleep(Duration::from_millis(100));
    e.play(h, false);
    let ms_per_sample = 1000.0 / 44100.0;
    let ms = slen as f32 * ms_per_sample;
    dbg!(slen, ms_per_sample, ms);
    std::thread::sleep(Duration::from_millis(ms as u64));
}

#[test]
pub fn test_clap_echo() {
    let mut a = Signal::white(4000);    // .wnd_exp() or .mul(Signal::wnd_exp)
    let wnd = Signal::wnd_exp(4000, 0.999);
    a *= &wnd;
    let i = Signal::impulse_echo(14000, 6, 0.5);
    i.plot("echo_impulse.png");
    // a.conv_full(&i);    // yea dis shiz be slow, faster to do directly a .echo
    a.conv_fast(&i);    // yea dis shiz be slow, faster to do directly a .echo
    a.plot("result.png");
    // yea conv fast be not working
    // or it fft time ay
    // wow convolution is cringe af
    play(&a);
}

#[test]
pub fn test_sweep() {
    let b = Signal::sweep(80000, 220.0, 880.0, 44100.0);
    let mut e = SoundAPI::new();
    let h = e.load_buffer(b);
    std::thread::sleep(Duration::from_millis(100));
    e.play(h, false);
    std::thread::sleep(Duration::from_millis(2000));

}

#[test]
pub fn test_sweep_ringmod() {
    let mut b = Signal::sweep(80000, 220.0, 440.0, 44100.0);
    let b2 = Signal::sweep(80000, 440.0, 220.0, 44100.0);
    // let b2 = Signal::sine(8000, 10.0, 44100.0);
    b *= &b2;
    let mut e = SoundAPI::new();
    let h = e.load_buffer(b);
    std::thread::sleep(Duration::from_millis(100));
    e.play(h, false);
    std::thread::sleep(Duration::from_millis(2000));
}

// ring mod with noise?

#[test]
fn test_play_sin() {
    let s = Signal::sine(40000, 220.0, 44100.0);
    play(&s);
}

// comb of sin will just be sin * A
#[test]
pub fn test_comb() {
    let mut s = Signal::sine(40000, 220.0, 44100.0);
    let mut s_copy = s.clone();
    let mut z = Signal::zero(10);
    z.cat(&s_copy);
    s_copy += &z;
    s_copy *= 0.5;
    s.cat(&s_copy);

    play(&s);
}

// comb of noise
#[test]
pub fn test_noise() {
    let mut s = Signal::white(40000);
    let mut z = Signal::zero(30);
    z.cat(&s);
    let mut s2 = s.clone();
    s2 += &z;
    s.cat(&s2);


    play(&s);
}

#[test]
pub fn kick() {
    let mut transient = Signal::white(50);
    let mut env = Signal::wnd_exp(80000, 0.9999);
    let mut s = Signal::sine(80000, 400.0, 44100.0);

    s *= &env;

    transient.cat(&s);
    play(&transient);

    let t1 = transient.clone();
    let t2 = transient.clone();

    // do munted shit
    // robust primitives: tape delay
    // me needing a cool reverb impulse

    

}

// echo impulse
// reverb impulse


#[test]
pub fn asd() {
    let mut a = Signal::white(50);
    let mut b = Signal::sine(80000, 100.0, 44100.0);
    let mut c = a.clone();
    c.cat(&b);
    a.save("a.wav");
    b.save("b.wav");
    c.save("c.wav");
    play(&c);
}


mod test {
    use std::f32::consts::PI;
    use crate::sound_api::*;
    use crate::signal::*;
    use crate::signal_synth::*;
    use std::time::Duration;

    #[test]
    pub fn test_beats() {
        // hmmmm ring buf as two frequencies vary? that would also be a good sound intuitionizer demo
        // like a 2d: matrix, identity line will probs be sin^2
        // what if u zinv and mul or zinv and add. zinv and add is comb filter
        // understanding ringmod
        // this ringmod sounds like it makes the sum and difference frequencies
        // a principled approach to sound production
        // so ring mod will apply an envelope, yea makes sense
        // but what if both are complex
        // take voice signal, multiply voice with hf carrier signal and it sounds sick
        // sweep that shit
        // it does sound really crazy
        // klaxon effect too
        // weird fx: mult with frequency sweep
        // what if u just multiplied 2 frequency sweeps lol
        // timesing random shit good
        // what about convolving random shit
        // eg white noise etc or sin. convolution is the sum of the diagonals. 
        // conv is the sum of all shifted scalar multiplications of the components of one signal with the other signal
        // conv does not contain ring mod (plain mul)
        // convolution of 2 sine waves produces a sinc. thats because its the same as ifft( fft(sin) * fft(sin) ) I guess, because they can be a rect function or some shit idk
        // conv in frequency is mul in time, mul in time is conv in frequency
        let mut sound_endpoint = SoundAPI::new();
        let mut buf1 = Signal::sine(5000, 2.0*PI*220.0, 44100.0);
        let mut buf2 = Signal::sine(5000, 2.0*PI*555.0, 44100.0);
        buf2 *= &buf1;
        let h1 = sound_endpoint.load_buffer(buf1);
        let h2 = sound_endpoint.load_buffer(buf2);

        dbg!(h1, h2);

        for i in 0..2 {
            sound_endpoint.play(h1, false);
            std::thread::sleep(Duration::from_secs(1));
            sound_endpoint.play(h2, false);
            std::thread::sleep(Duration::from_secs(1));
        }

    }

    #[test]
    pub fn test_kick() {
        // hmmmm ring buf as two frequencies vary? that would also be a good sound intuitionizer demo
        // like a 2d: matrix, identity line will probs be sin^2
        let mut sound_endpoint = SoundAPI::new();
        let mut buf = Signal::kick(160000);
        let h1 = sound_endpoint.load_buffer(buf);

        for i in 0..1 {
            sound_endpoint.play(h1, false);
            std::thread::sleep(Duration::from_secs(1));
        }
        std::thread::sleep(Duration::from_secs(1));
    }

    #[test]
    pub fn test_load() {
        let mut sound_endpoint = SoundAPI::new();
        let mut buf = Signal::load("waveguide.wav");
        let h1 = sound_endpoint.load_buffer(buf);
        std::thread::sleep(Duration::from_millis(100));
        sound_endpoint.play(h1, false); // sum ting wong it no play
        std::thread::sleep(Duration::from_secs(1));
    }
    #[test]
    pub fn test_sin() {
        let mut sound_endpoint = SoundAPI::new();
        let mut buf = Signal::sine(5000, 200.0, 44100.0);
        let h1 = sound_endpoint.load_buffer(buf);
        std::thread::sleep(Duration::from_millis(100));
        sound_endpoint.play(h1, false); // sum ting wong it no play
        std::thread::sleep(Duration::from_secs(1));
    }

    #[test]
    fn test_tanh() {
        let sb = Signal::sine(30000, 220.0, 44100.0);
        
        let mut tb1 = sb.clone();
        tb1.tanh();

        let mut tb2 = sb.clone();
        tb2 *= 2.0;
        tb2.tanh();

        let mut tb3 = sb.clone();
        tb3 *= 3.0;
        tb3.tanh();

        let mut s = sb.clone();
        s.cat(&tb1);
        s.cat(&tb2);
        s.cat(&tb3);

        let mut sound_endpoint = SoundAPI::new();
        let h = sound_endpoint.load_buffer(s);
        std::thread::sleep(Duration::from_millis(100));
        sound_endpoint.play(h, false);

        std::thread::sleep(Duration::from_millis(3000));
    }

    #[test]
    fn test_tanh2() {
        let sb = Signal::sine(30000, 220.0, 44100.0);
        
        let mut tb1 = sb.clone();
        tb1.tanh();

        let mut tb2 = sb.clone();
        tb2 *= 1.1;
        tb2.tanh();

        let mut tb3 = sb.clone();
        tb3 *= 1.2;
        tb3.tanh();

        let mut s = sb.clone();
        s.cat(&tb1);
        s.cat(&tb2);
        s.cat(&tb3);

        let mut sound_endpoint = SoundAPI::new();
        let h = sound_endpoint.load_buffer(s);
        std::thread::sleep(Duration::from_millis(100));
        sound_endpoint.play(h, false);

        std::thread::sleep(Duration::from_millis(3000));
    }

    #[test]
    fn test_tanh3() {
        let sb = Signal::sine(30000, 220.0, 44100.0);
        
        let mut tb1 = sb.clone();
        tb1.tanh();

        let mut tb2 = sb.clone();
        tb2.tanh();
        tb2.tanh();

        let mut tb3 = sb.clone();
        tb3.tanh();
        tb3.tanh();
        tb3.tanh();

        let mut s = sb.clone();
        s.cat(&tb1);
        s.cat(&tb2);
        s.cat(&tb3);

        let mut sound_endpoint = SoundAPI::new();
        let h = sound_endpoint.load_buffer(s);
        std::thread::sleep(Duration::from_millis(100));
        sound_endpoint.play(h, false);

        std::thread::sleep(Duration::from_millis(3000));
    }

    #[test]
    fn test_tanh4() {
        let sb = Signal::sine(30000, 220.0, 44100.0);
        
        let mut tb1 = sb.clone();
        tb1.tanh();

        let mut tb2 = sb.clone();
        tb2.tanh();
        tb2 *= 2.0;
        tb2.tanh();
        
        let mut tb3 = sb.clone();
        tb3.tanh();
        tb3 *= 2.0;
        tb3.tanh();
        tb3 *= 2.0;
        tb3.tanh();

        let mut s = sb.clone();
        s.cat(&tb1);
        s.cat(&tb2);
        s.cat(&tb3);

        let mut sound_endpoint = SoundAPI::new();
        let h = sound_endpoint.load_buffer(s);
        std::thread::sleep(Duration::from_millis(100));
        sound_endpoint.play(h, false);

        std::thread::sleep(Duration::from_millis(3000));
    }
}

#[test]
fn test_tanh() {
    dbg!(0.5f32.tanh());
    dbg!(1.0f32.tanh());
    dbg!(2.0f32.tanh());
    dbg!(3.0f32.tanh());
    dbg!(4.0f32.tanh());
}

// do a test where its sin 0..1, then apply varying degrees of tanh and concat buffers to see


use crate::signal::*;

impl Signal {
    // fc: normalized cutoff
    pub fn impulse_lp(fc: f32, n: usize) -> Self {
        let coeffs = lowpass_filter_coeffs(1.0, fc, n);
        Signal { samples: coeffs }
    }

    pub fn impulse_echo(d: usize, num_echos: usize, atten: f32) -> Self {
        let mut samples = vec![0.0; num_echos*d];
        let mut mag = 1.0;
        for i in 0..num_echos {
            samples[i*d] = mag;
            mag *= atten;
        }
        Signal { samples }
    }
}

pub fn lowpass_filter_coeffs(fs: f32, fc: f32, num_taps: usize) -> Vec<f32> {
    let nyquist = 0.5 * fs;
    let cutoff = fc / nyquist;

    // Calculate the filter impulse response (sinc function)
    let mut impulse_response = Vec::with_capacity(num_taps);
    let half_tap = (num_taps - 1) as f32 * 0.5;
    for n in 0..num_taps {
        let sinc_val = if n as f32 == half_tap {
            2.0 * cutoff
        } else {
            let t = (n as f32 - half_tap) * std::f32::consts::PI * cutoff;
            (t).sin() / t
        };
        impulse_response.push(sinc_val);
    }

    // Apply a window function (Hanning) to the impulse response
    let windowed_response: Vec<f32> = impulse_response
        .iter()
        .enumerate()
        .map(|(i, x)| x * 0.5 * (1.0 - (2.0 * std::f32::consts::PI * i as f32 / (num_taps - 1) as f32).cos()))
        .collect();

    // Normalize the filter coefficients
    let sum: f32 = windowed_response.iter().sum();
    let normalized_response: Vec<f32> = windowed_response.iter().map(|x| x / sum).collect();

    normalized_response
}




pub fn plot(&self, path: &str) {
    let xres = 640;
    let yres = 480;
    let mut buf = ImageBuffer::new(xres, yres);
    buf.plot(&self.samples, vec4(0.0, 0.0, 1.0, 1.0), 3);
    buf.dump_to_file(path);
}



pub fn conv_fast(&mut self, other: &Signal) -> Self {
    let len = self.len() + other.len() - 1;
    self.set_len(len);
    let mut b = other.clone();
    b.set_len(len);

    let mut a = self.fft();
    let b = b.fft();
    a *= &b;
    a.ifft()
}
pub fn conv_full(&mut self, other: &Signal) {
    let mut result = vec![0.0; self.samples.len() + other.samples.len() - 1];
    for i in 0..result.len() {
        for j in 0..other.samples.len() {
            if i >= j && i - j < self.samples.len() {
                result[i] += self.samples[i - j] * other.samples[j];
            }
        }
    }
    self.samples = result;
}
pub fn conv_short(&mut self, other: &Signal) {
    let mut result = vec![0.0; self.samples.len() + other.samples.len() - 1];
    for i in 0..result.len() {
        for j in 0..other.samples.len() {
            if i >= j && i - j < self.samples.len() {
                result[i] += self.samples[i - j] * other.samples[j];
            }
        }
    }
    self.samples = result.split_off(other.samples.len() - 1);
}


pub fn cat(&mut self, other: &Signal) {
    self.samples.extend_from_slice(&other.samples);
}
pub fn tanh(&mut self) {
    for sample in &mut self.samples {
        *sample = sample.tanh();
    }
}
// crossfades other into self. use polynomial interpolation. i did it in 
pub fn crossfade(&mut self, other: &Signal, n_start: usize, n_end: usize) {

}
pub fn fft(&self) -> Self {
    // bruh im not even using dat shit
    // can it do real ffts or whatever  
    use rustfft::{FftPlanner, num_complex::Complex};
    let mut planner = FftPlanner::new();
    let fft = planner.plan_fft_forward(self.len());
    let mut buffer: Vec<Complex<f32>> = self.samples.iter().map(|x| Complex{ re: *x, im: 0.0f32}).collect();
    fft.process(&mut buffer);
    Signal { samples: buffer.iter().map(|x| x.re).collect() }
}
pub fn ifft(&self) -> Self {
    use rustfft::{FftPlanner, num_complex::Complex};
    let mut planner = FftPlanner::new();
    let fft = planner.plan_fft_inverse(self.len());
    let mut buffer: Vec<Complex<f32>> = self.samples.iter().map(|x| Complex{ re: *x, im: 0.0f32}).collect();
    fft.process(&mut buffer);
    Signal { samples: buffer.iter().map(|x| x.re).collect() }
}